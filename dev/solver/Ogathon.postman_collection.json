{
	"info": {
		"_postman_id": "42ced428-d531-4b4c-804d-48c4ef3f5195",
		"name": "Ogathon",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23118988"
	},
	"item": [
		{
			"name": "00. Swagger",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Swagger_Status200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    console.log(\"[PUNTOS] Documentación OpenAPI: +5\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/swagger",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"swagger"
					]
				}
			},
			"response": []
		},
		{
			"name": "01. Solution1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Solution1_Status200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    console.log(\"[PUNTOS] Exposición vía API y Docker: +12\");\r",
							"});\r",
							"\r",
							"pm.test('Solution1_Result', () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    let actualValue = jsonData.toString();\r",
							"    pm.expect(actualValue).to.eql(\"7540113804746346429\");\r",
							"    console.log(\"[PUNTOS] Resultado correcto: +8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Solution1_ResponseTime\", function () {\r",
							"    let responseTime = pm.response.responseTime;\r",
							"    pm.expect(pm.response.responseTime).to.be.at.most(1000);\r",
							"    \r",
							"    if (responseTime <= 100) {\r",
							"        console.log(\"[PUNTOS] Tiempos de respuesta: +4\");\r",
							"    }\r",
							"    else if (responseTime > 100 && responseTime <= 500) {\r",
							"        console.log(\"[PUNTOS] Tiempos de respuesta: +2\");\r",
							"    }\r",
							"   else if (responseTime > 500 && responseTime <= 1000) {\r",
							"        console.log(\"[PUNTOS] Tiempos de respuesta: +1\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/challenges/solution-1?n=91",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"challenges",
						"solution-1"
					],
					"query": [
						{
							"key": "n",
							"value": "91"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "02. Solution2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Solution2_Status200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    console.log(\"[PUNTOS] Exposición vía API y Docker: +12\");\r",
							"});\r",
							"\r",
							"pm.test('Solution2_Result', () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    let actualValue = jsonData.toString();\r",
							"    pm.expect(actualValue).to.eql(\"7770\");\r",
							"    console.log(\"[PUNTOS] Resultado correcto: +8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Solution2_ResponseTime\", function () {\r",
							"    let responseTime = pm.response.responseTime;\r",
							"    pm.expect(pm.response.responseTime).to.be.at.most(1000);\r",
							"\r",
							"    if (responseTime <= 100) {\r",
							"        console.log(\"[PUNTOS] Tiempos de respuesta: +4\");\r",
							"    }\r",
							"    else if (responseTime > 100 && responseTime <= 500) {\r",
							"        console.log(\"[PUNTOS] Tiempos de respuesta: +2\");\r",
							"    }\r",
							"   else if (responseTime > 500 && responseTime <= 1000) {\r",
							"        console.log(\"[PUNTOS] Tiempos de respuesta: +1\");\r",
							"    }  \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/challenges/solution-2?n=9100",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"challenges",
						"solution-2"
					],
					"query": [
						{
							"key": "n",
							"value": "9100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "03. Solution3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Solution3_Status200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    console.log(\"[PUNTOS] Exposición vía API y Docker: +12\");\r",
							"});\r",
							"\r",
							"pm.test('Solution3_Result', () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    let actualValue = jsonData.toString();\r",
							"    pm.expect(actualValue).to.eql(\"9\");\r",
							"    console.log(\"[PUNTOS] Resultado correcto: +8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Solution3_ResponseTime\", function () {\r",
							"    let responseTime = pm.response.responseTime;\r",
							"    pm.expect(pm.response.responseTime).to.be.at.most(1000);\r",
							"\r",
							"    if (responseTime <= 100) {\r",
							"        console.log(\"[PUNTOS] Tiempos de respuesta: +4\");\r",
							"    }\r",
							"    else if (responseTime > 100 && responseTime <= 500) {\r",
							"        console.log(\"[PUNTOS] Tiempos de respuesta: +2\");\r",
							"    }\r",
							"   else if (responseTime > 500 && responseTime <= 1000) {\r",
							"        console.log(\"[PUNTOS] Tiempos de respuesta: +1\");\r",
							"    } \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    [1, 3, 2],\r\n    [2, 1, 3],\r\n    [3, 2, 1]\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/challenges/solution-3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"challenges",
						"solution-3"
					]
				}
			},
			"response": []
		}
	]
}